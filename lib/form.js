var _ = require('lodash'),
    conform = require('conform'),
    conformForm = conform.Form,
    Label = conform.Label;

var Form = function() {
  return this.init.apply(this, arguments);
};

Form.prototype = new conformForm();
Form.prototype.constructor = Form;

Form.prototype.init = function(instance) {
  var self = this;
  var fields = [];
  var buttons = [];
  var getValue = function(instance, key) {
    var value;

    if( instance.dataValues && instance.dataValues[key] ) {
      value = field.dataValues[ key ];

      /* Invalid Date */
      if(value instanceof Date && isNaN(value.toString())) {
        value = undefined;
      }
    }

    return value;
  };
  var generateField = function(field, key) {
    var type,
        attributes = {},
        include = self.filter(field),
        label = new Label(key);

    if(!include) {
      return;
    }

    attributes.value = getValue(instance, key);
    attributes.name = key;
    type = self.getFieldType(field.type.constructor.key, field);

    switch(type) {
      case 'RadioChoice':
        var choices = _.map(field.values, function(value) {
          return {
            text: value,
          };
        });

        return new conform[type](key, choices, label);
        break;

      default:
        return new conform[type](attributes, label);
    }
  };

  var fields = _.map(instance.rawAttributes, generateField);
  fields = _.compact(fields);
  return conformForm.prototype.init.apply(this, [fields, buttons, {}]);
};

Form.prototype.filter = function(field) {
  return !!!field._autoGenerated;
};

Form.prototype.getFieldType = function(seqFieldType, field) {
  switch(seqFieldType) {
    case 'BOOLEAN':
      /* Todo: Checkbox */
      return 'RadioChoice';
      break;
    case 'ENUM':
    case 'ARRAY':
      return 'RadioChoice';
      break;
    case 'TEXT':
      return 'Textarea';
      break;
    default:
      return 'Input';
  }
};

module.exports = Form;